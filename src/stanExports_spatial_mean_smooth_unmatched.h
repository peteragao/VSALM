// Generated by rstantools.  Do not edit by hand.

/*
    VSALM is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    VSALM is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with VSALM.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_spatial_mean_smooth_unmatched_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_spatial_mean_smooth_unmatched");
    reader.add_event(78, 76, "end", "model_spatial_mean_smooth_unmatched");
    return reader;
}
template <bool propto, typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
pcprec_lpdf(const T0__& prec,
                const T1__& u,
                const T2__& alpha, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 4;
        local_scalar_t__ lambda(DUMMY_VAR__);
        (void) lambda;  // dummy to suppress unused var warning
        stan::math::initialize(lambda, DUMMY_VAR__);
        stan::math::fill(lambda, DUMMY_VAR__);
        stan::math::assign(lambda,(-(stan::math::log(alpha)) / u));
        current_statement_begin__ = 5;
        local_scalar_t__ s(DUMMY_VAR__);
        (void) s;  // dummy to suppress unused var warning
        stan::math::initialize(s, DUMMY_VAR__);
        stan::math::fill(s, DUMMY_VAR__);
        stan::math::assign(s,(1 / stan::math::sqrt(prec)));
        current_statement_begin__ = 6;
        local_scalar_t__ d(DUMMY_VAR__);
        (void) d;  // dummy to suppress unused var warning
        stan::math::initialize(d, DUMMY_VAR__);
        stan::math::fill(d, DUMMY_VAR__);
        stan::math::assign(d,(((-(stan::math::log(2)) - (1.5 * stan::math::log(prec))) + stan::math::log(lambda)) - (lambda * s)));
        current_statement_begin__ = 7;
        return stan::math::promote_scalar<fun_return_scalar_t__>(d);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
pcprec_lpdf(const T0__& prec,
                const T1__& u,
                const T2__& alpha, std::ostream* pstream__) {
    return pcprec_lpdf<false>(prec,u,alpha, pstream__);
}
struct pcprec_lpdf_functor__ {
    template <bool propto, typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& prec,
                const T1__& u,
                const T2__& alpha, std::ostream* pstream__) const {
        return pcprec_lpdf(prec, u, alpha, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_spatial_mean_smooth_unmatched
  : public stan::model::model_base_crtp<model_spatial_mean_smooth_unmatched> {
private:
        int N;
        int N_data;
        int N_edges;
        int K;
        std::vector<int> ind_data;
        std::vector<int> n1;
        std::vector<int> n2;
        std::vector<double> Yhat;
        std::vector<double> Vhat;
        matrix_d X;
        double scaling_factor;
        double pc_u_v;
        double pc_u_alpha;
public:
    model_spatial_mean_smooth_unmatched(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_spatial_mean_smooth_unmatched(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_spatial_mean_smooth_unmatched_namespace::model_spatial_mean_smooth_unmatched";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 13;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 0);
            current_statement_begin__ = 14;
            context__.validate_dims("data initialization", "N_data", "int", context__.to_vec());
            N_data = int(0);
            vals_i__ = context__.vals_i("N_data");
            pos__ = 0;
            N_data = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_data", N_data, 0);
            current_statement_begin__ = 15;
            context__.validate_dims("data initialization", "N_edges", "int", context__.to_vec());
            N_edges = int(0);
            vals_i__ = context__.vals_i("N_edges");
            pos__ = 0;
            N_edges = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_edges", N_edges, 0);
            current_statement_begin__ = 16;
            context__.validate_dims("data initialization", "K", "int", context__.to_vec());
            K = int(0);
            vals_i__ = context__.vals_i("K");
            pos__ = 0;
            K = vals_i__[pos__++];
            check_greater_or_equal(function__, "K", K, 0);
            current_statement_begin__ = 17;
            validate_non_negative_index("ind_data", "N_data", N_data);
            context__.validate_dims("data initialization", "ind_data", "int", context__.to_vec(N_data));
            ind_data = std::vector<int>(N_data, int(0));
            vals_i__ = context__.vals_i("ind_data");
            pos__ = 0;
            size_t ind_data_k_0_max__ = N_data;
            for (size_t k_0__ = 0; k_0__ < ind_data_k_0_max__; ++k_0__) {
                ind_data[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 18;
            validate_non_negative_index("n1", "N_edges", N_edges);
            context__.validate_dims("data initialization", "n1", "int", context__.to_vec(N_edges));
            n1 = std::vector<int>(N_edges, int(0));
            vals_i__ = context__.vals_i("n1");
            pos__ = 0;
            size_t n1_k_0_max__ = N_edges;
            for (size_t k_0__ = 0; k_0__ < n1_k_0_max__; ++k_0__) {
                n1[k_0__] = vals_i__[pos__++];
            }
            size_t n1_i_0_max__ = N_edges;
            for (size_t i_0__ = 0; i_0__ < n1_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "n1[i_0__]", n1[i_0__], 1);
                check_less_or_equal(function__, "n1[i_0__]", n1[i_0__], N);
            }
            current_statement_begin__ = 19;
            validate_non_negative_index("n2", "N_edges", N_edges);
            context__.validate_dims("data initialization", "n2", "int", context__.to_vec(N_edges));
            n2 = std::vector<int>(N_edges, int(0));
            vals_i__ = context__.vals_i("n2");
            pos__ = 0;
            size_t n2_k_0_max__ = N_edges;
            for (size_t k_0__ = 0; k_0__ < n2_k_0_max__; ++k_0__) {
                n2[k_0__] = vals_i__[pos__++];
            }
            size_t n2_i_0_max__ = N_edges;
            for (size_t i_0__ = 0; i_0__ < n2_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "n2[i_0__]", n2[i_0__], 1);
                check_less_or_equal(function__, "n2[i_0__]", n2[i_0__], N);
            }
            current_statement_begin__ = 22;
            validate_non_negative_index("Yhat", "N_data", N_data);
            context__.validate_dims("data initialization", "Yhat", "double", context__.to_vec(N_data));
            Yhat = std::vector<double>(N_data, double(0));
            vals_r__ = context__.vals_r("Yhat");
            pos__ = 0;
            size_t Yhat_k_0_max__ = N_data;
            for (size_t k_0__ = 0; k_0__ < Yhat_k_0_max__; ++k_0__) {
                Yhat[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 23;
            validate_non_negative_index("Vhat", "N_data", N_data);
            context__.validate_dims("data initialization", "Vhat", "double", context__.to_vec(N_data));
            Vhat = std::vector<double>(N_data, double(0));
            vals_r__ = context__.vals_r("Vhat");
            pos__ = 0;
            size_t Vhat_k_0_max__ = N_data;
            for (size_t k_0__ = 0; k_0__ < Vhat_k_0_max__; ++k_0__) {
                Vhat[k_0__] = vals_r__[pos__++];
            }
            size_t Vhat_i_0_max__ = N_data;
            for (size_t i_0__ = 0; i_0__ < Vhat_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "Vhat[i_0__]", Vhat[i_0__], 0);
            }
            current_statement_begin__ = 24;
            validate_non_negative_index("X", "N", N);
            validate_non_negative_index("X", "K", K);
            context__.validate_dims("data initialization", "X", "matrix_d", context__.to_vec(N,K));
            X = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N, K);
            vals_r__ = context__.vals_r("X");
            pos__ = 0;
            size_t X_j_2_max__ = K;
            size_t X_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < X_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X_j_1_max__; ++j_1__) {
                    X(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 27;
            context__.validate_dims("data initialization", "scaling_factor", "double", context__.to_vec());
            scaling_factor = double(0);
            vals_r__ = context__.vals_r("scaling_factor");
            pos__ = 0;
            scaling_factor = vals_r__[pos__++];
            check_greater_or_equal(function__, "scaling_factor", scaling_factor, 0);
            current_statement_begin__ = 28;
            context__.validate_dims("data initialization", "pc_u_v", "double", context__.to_vec());
            pc_u_v = double(0);
            vals_r__ = context__.vals_r("pc_u_v");
            pos__ = 0;
            pc_u_v = vals_r__[pos__++];
            check_greater_or_equal(function__, "pc_u_v", pc_u_v, 0);
            current_statement_begin__ = 29;
            context__.validate_dims("data initialization", "pc_u_alpha", "double", context__.to_vec());
            pc_u_alpha = double(0);
            vals_r__ = context__.vals_r("pc_u_alpha");
            pos__ = 0;
            pc_u_alpha = vals_r__[pos__++];
            check_greater_or_equal(function__, "pc_u_alpha", pc_u_alpha, 0);
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 34;
            num_params_r__ += 1;
            current_statement_begin__ = 35;
            validate_non_negative_index("betas", "K", K);
            num_params_r__ += K;
            current_statement_begin__ = 38;
            validate_non_negative_index("u_ns", "N", N);
            num_params_r__ += N;
            current_statement_begin__ = 40;
            num_params_r__ += 1;
            current_statement_begin__ = 41;
            num_params_r__ += 1;
            current_statement_begin__ = 42;
            validate_non_negative_index("u_sp", "N", N);
            num_params_r__ += N;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_spatial_mean_smooth_unmatched() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 34;
        if (!(context__.contains_r("mu")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable mu missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("mu");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "mu", "double", context__.to_vec());
        double mu(0);
        mu = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(mu);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable mu: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 35;
        if (!(context__.contains_r("betas")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable betas missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("betas");
        pos__ = 0U;
        validate_non_negative_index("betas", "K", K);
        context__.validate_dims("parameter initialization", "betas", "vector_d", context__.to_vec(K));
        Eigen::Matrix<double, Eigen::Dynamic, 1> betas(K);
        size_t betas_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < betas_j_1_max__; ++j_1__) {
            betas(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(betas);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable betas: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 38;
        if (!(context__.contains_r("u_ns")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable u_ns missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("u_ns");
        pos__ = 0U;
        validate_non_negative_index("u_ns", "N", N);
        context__.validate_dims("parameter initialization", "u_ns", "vector_d", context__.to_vec(N));
        Eigen::Matrix<double, Eigen::Dynamic, 1> u_ns(N);
        size_t u_ns_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < u_ns_j_1_max__; ++j_1__) {
            u_ns(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(u_ns);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable u_ns: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 40;
        if (!(context__.contains_r("sigma_u")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_u missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_u");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma_u", "double", context__.to_vec());
        double sigma_u(0);
        sigma_u = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigma_u);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_u: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 41;
        if (!(context__.contains_r("phi")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable phi missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("phi");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "phi", "double", context__.to_vec());
        double phi(0);
        phi = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0, 1, phi);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable phi: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 42;
        if (!(context__.contains_r("u_sp")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable u_sp missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("u_sp");
        pos__ = 0U;
        validate_non_negative_index("u_sp", "N", N);
        context__.validate_dims("parameter initialization", "u_sp", "vector_d", context__.to_vec(N));
        Eigen::Matrix<double, Eigen::Dynamic, 1> u_sp(N);
        size_t u_sp_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < u_sp_j_1_max__; ++j_1__) {
            u_sp(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(u_sp);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable u_sp: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 34;
            local_scalar_t__ mu;
            (void) mu;  // dummy to suppress unused var warning
            if (jacobian__)
                mu = in__.scalar_constrain(lp__);
            else
                mu = in__.scalar_constrain();
            current_statement_begin__ = 35;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> betas;
            (void) betas;  // dummy to suppress unused var warning
            if (jacobian__)
                betas = in__.vector_constrain(K, lp__);
            else
                betas = in__.vector_constrain(K);
            current_statement_begin__ = 38;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> u_ns;
            (void) u_ns;  // dummy to suppress unused var warning
            if (jacobian__)
                u_ns = in__.vector_constrain(N, lp__);
            else
                u_ns = in__.vector_constrain(N);
            current_statement_begin__ = 40;
            local_scalar_t__ sigma_u;
            (void) sigma_u;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_u = in__.scalar_lb_constrain(0, lp__);
            else
                sigma_u = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 41;
            local_scalar_t__ phi;
            (void) phi;  // dummy to suppress unused var warning
            if (jacobian__)
                phi = in__.scalar_lub_constrain(0, 1, lp__);
            else
                phi = in__.scalar_lub_constrain(0, 1);
            current_statement_begin__ = 42;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> u_sp;
            (void) u_sp;  // dummy to suppress unused var warning
            if (jacobian__)
                u_sp = in__.vector_constrain(N, lp__);
            else
                u_sp = in__.vector_constrain(N);
            // transformed parameters
            current_statement_begin__ = 46;
            validate_non_negative_index("theta", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> theta(N);
            stan::math::initialize(theta, DUMMY_VAR__);
            stan::math::fill(theta, DUMMY_VAR__);
            current_statement_begin__ = 47;
            validate_non_negative_index("u", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> u(N);
            stan::math::initialize(u, DUMMY_VAR__);
            stan::math::fill(u, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 49;
            stan::math::assign(u, add(multiply(stan::math::sqrt((1 - phi)), u_ns), multiply(stan::math::sqrt((phi / scaling_factor)), u_sp)));
            current_statement_begin__ = 50;
            stan::math::assign(theta, add(mu, multiply(sigma_u, u)));
            current_statement_begin__ = 51;
            if (as_bool(logical_gt(K, 0))) {
                current_statement_begin__ = 52;
                stan::math::assign(theta, add(theta, multiply(X, betas)));
            }
            current_statement_begin__ = 54;
            stan::math::assign(theta, inv_logit(theta));
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 46;
            size_t theta_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(theta(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: theta" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable theta: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 47;
            size_t u_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < u_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(u(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: u" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable u: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            // model body
            {
            current_statement_begin__ = 58;
            int theta_k(0);
            (void) theta_k;  // dummy to suppress unused var warning
            stan::math::fill(theta_k, std::numeric_limits<int>::min());
            current_statement_begin__ = 59;
            if (as_bool(logical_gt(K, 0))) {
                current_statement_begin__ = 60;
                lp_accum__.add(normal_log<propto__>(betas, 0.0, 1.0));
            }
            current_statement_begin__ = 62;
            lp_accum__.add(beta_log<propto__>(phi, 0.5, 0.5));
            current_statement_begin__ = 65;
            lp_accum__.add((-(0.5) * dot_self(subtract(stan::model::rvalue(u_sp, stan::model::cons_list(stan::model::index_multi(n1), stan::model::nil_index_list()), "u_sp"), stan::model::rvalue(u_sp, stan::model::cons_list(stan::model::index_multi(n2), stan::model::nil_index_list()), "u_sp")))));
            current_statement_begin__ = 67;
            lp_accum__.add(normal_log<propto__>(sum(u_sp), 0, (0.001 * N)));
            current_statement_begin__ = 69;
            lp_accum__.add(pcprec_lpdf((1 / pow(sigma_u, 2)), pc_u_v, pc_u_alpha, pstream__));
            current_statement_begin__ = 70;
            lp_accum__.add(normal_log(mu, 0, 1));
            current_statement_begin__ = 71;
            lp_accum__.add(normal_log(u_ns, 0, 1));
            current_statement_begin__ = 72;
            for (int i = 1; i <= N_data; ++i) {
                current_statement_begin__ = 73;
                stan::math::assign(theta_k, get_base1(ind_data, i, "ind_data", 1));
                current_statement_begin__ = 74;
                lp_accum__.add(normal_log(get_base1(Yhat, i, "Yhat", 1), get_base1(theta, theta_k, "theta", 1), stan::math::sqrt(get_base1(Vhat, i, "Vhat", 1))));
            }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("mu");
        names__.push_back("betas");
        names__.push_back("u_ns");
        names__.push_back("sigma_u");
        names__.push_back("phi");
        names__.push_back("u_sp");
        names__.push_back("theta");
        names__.push_back("u");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_spatial_mean_smooth_unmatched_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double mu = in__.scalar_constrain();
        vars__.push_back(mu);
        Eigen::Matrix<double, Eigen::Dynamic, 1> betas = in__.vector_constrain(K);
        size_t betas_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < betas_j_1_max__; ++j_1__) {
            vars__.push_back(betas(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> u_ns = in__.vector_constrain(N);
        size_t u_ns_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < u_ns_j_1_max__; ++j_1__) {
            vars__.push_back(u_ns(j_1__));
        }
        double sigma_u = in__.scalar_lb_constrain(0);
        vars__.push_back(sigma_u);
        double phi = in__.scalar_lub_constrain(0, 1);
        vars__.push_back(phi);
        Eigen::Matrix<double, Eigen::Dynamic, 1> u_sp = in__.vector_constrain(N);
        size_t u_sp_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < u_sp_j_1_max__; ++j_1__) {
            vars__.push_back(u_sp(j_1__));
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 46;
            validate_non_negative_index("theta", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> theta(N);
            stan::math::initialize(theta, DUMMY_VAR__);
            stan::math::fill(theta, DUMMY_VAR__);
            current_statement_begin__ = 47;
            validate_non_negative_index("u", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> u(N);
            stan::math::initialize(u, DUMMY_VAR__);
            stan::math::fill(u, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 49;
            stan::math::assign(u, add(multiply(stan::math::sqrt((1 - phi)), u_ns), multiply(stan::math::sqrt((phi / scaling_factor)), u_sp)));
            current_statement_begin__ = 50;
            stan::math::assign(theta, add(mu, multiply(sigma_u, u)));
            current_statement_begin__ = 51;
            if (as_bool(logical_gt(K, 0))) {
                current_statement_begin__ = 52;
                stan::math::assign(theta, add(theta, multiply(X, betas)));
            }
            current_statement_begin__ = 54;
            stan::math::assign(theta, inv_logit(theta));
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t theta_j_1_max__ = N;
                for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
                    vars__.push_back(theta(j_1__));
                }
                size_t u_j_1_max__ = N;
                for (size_t j_1__ = 0; j_1__ < u_j_1_max__; ++j_1__) {
                    vars__.push_back(u(j_1__));
                }
            }
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_spatial_mean_smooth_unmatched";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu";
        param_names__.push_back(param_name_stream__.str());
        size_t betas_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < betas_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "betas" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t u_ns_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < u_ns_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "u_ns" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_u";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "phi";
        param_names__.push_back(param_name_stream__.str());
        size_t u_sp_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < u_sp_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "u_sp" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t theta_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t u_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < u_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "u" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu";
        param_names__.push_back(param_name_stream__.str());
        size_t betas_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < betas_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "betas" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t u_ns_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < u_ns_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "u_ns" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_u";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "phi";
        param_names__.push_back(param_name_stream__.str());
        size_t u_sp_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < u_sp_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "u_sp" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t theta_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t u_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < u_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "u" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
    }
}; // model
}  // namespace
typedef model_spatial_mean_smooth_unmatched_namespace::model_spatial_mean_smooth_unmatched stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
