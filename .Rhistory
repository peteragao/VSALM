dir.create(file.path(sim_res_dir), showWarnings = FALSE)
figs_dir <- "results/figures/"
#### 0.1 COUNTRY INFO ##########################################################
country <- "Nigeria"
survey_year <- 2018
gadm_abbrev <- "NGA"
pop_abbrev <- 'nga'
# dhsStata, which contains survey data
dhs_file <- "dhsStata/NGKR7BDT/NGKR7BFL.DTA"
# survey GPS
dhsFlat_file <- "NGGE7BFL"
country_dir <- paste0("../", country, "/")
poly_path <- paste0(country_dir, "shapeFiles_gadm")
res_dir <- "./results"
proj_data_dir <-  paste0("./data/" , country, "/", sep="")
dir.create(file.path(proj_data_dir), showWarnings = FALSE)
# link to the main dropbox folder for population rasters
pop_raw_dir <- paste0(country_dir, 'Population/')
cov_raw_dir <- paste0(country_dir, 'covariates/')
#### 1 GENERATE POPULATION #####################################################
#### 1.1 LOAD NIGERIA INFO #####################################################
country <- "Nigeria"
survey_year <- 2018
gadm_abbrev <- "NGA"
pop_abbrev <- 'nga'
poly_path <- paste0("data/", country, "/shapeFiles_gadm/")
#### 1.1.1 Load GADM polygons ####
poly_layer_adm0 <- paste('gadm36', gadm_abbrev,
'0', sep = "_")
poly_layer_adm1 <- paste('gadm36', gadm_abbrev,
'1', sep = "_")
poly_layer_adm2 <- paste('gadm36', gadm_abbrev,
'2', sep = "_")
poly_adm0 <- readOGR(dsn = poly_path, encoding = "UTF-8", use_iconv = TRUE,
layer = as.character(poly_layer_adm0))
# use encoding to read special characters
poly_adm1 <- readOGR(dsn = poly_path,encoding = "UTF-8", use_iconv = TRUE,
layer = as.character(poly_layer_adm1))
if(sum(grepl(paste('gadm36', gadm_abbrev,
'2', sep = "_"), list.files(poly_path))) != 0){
poly_adm2 <- readOGR(dsn = poly_path,encoding = "UTF-8", use_iconv = TRUE,
layer = as.character(poly_layer_adm2))}
if (exists("poly_adm2")) {
proj4string(poly_adm0) <- proj4string(poly_adm1)  <- proj4string(poly_adm2)
}else {
proj4string(poly_adm0) <- proj4string(poly_adm1)
}
poly_adm2$NAME_1 <- as.character(poly_adm2$NAME_1)
poly_adm1$NAME_1 <- as.character(poly_adm1$NAME_1)
poly_adm2$NAME_1[poly_adm2$NAME_1 == "Federal Capital Territory"] <- "Abuja"
poly_adm1$NAME_1[poly_adm1$NAME_1 == "Federal Capital Territory"] <- "Abuja"
#### 1.1.2 Create adjacency matrices and tables ####
if(exists("poly_adm1")){
admin1_mat <- poly2nb(SpatialPolygons(poly_adm1@polygons))
admin1_mat <- nb2mat(admin1_mat, zero.policy = TRUE)
colnames(admin1_mat) <-
rownames(admin1_mat) <-
paste0("admin1_", 1:dim(admin1_mat)[1])
admin1_names <- data.frame(GADM = poly_adm1@data$NAME_1,
Internal = rownames(admin1_mat))
} else {
message("There is no Admin1 polygon file.")
}
if(exists("poly_adm2")){
admin2_mat <- poly2nb(SpatialPolygons(poly_adm2@polygons))
admin2_mat <- nb2mat(admin2_mat, zero.policy = TRUE)
colnames(admin2_mat) <-
rownames(admin2_mat) <-
paste0("admin2_", 1:dim(admin2_mat)[1])
admin2_names <- data.frame(GADM = poly_adm2@data$NAME_2,
Internal = rownames(admin2_mat))
} else {
message("There is no Admin2 polygon file.")
}
#### 1.2 DHS DATA ##############################################################
if (TRUE) {
svy_dat <- readRDS(paste0(proj_data_dir, "clean_DHS_data_DELETE-ME.rds"))
} else {
#### 1.2.1 Load EA locations ####
ea_locs_path <- paste0(country_dir, "dhsFlat/", dhsFlat_file)
ea_locs <- readOGR(dsn = path.expand(ea_locs_path),
layer = as.character(dhsFlat_file))
# Remove EAs with missing geo information
missing_idx <- ea_locs$LATNUM == 0
ea_locs <- ea_locs[!missing_idx, ]
#### 1.2.2 Load Recode data ####
in_dat = read.dta13(paste0(country_dir, dhs_file))
svy_dat = data.frame(
cluster = in_dat$v001,
hshold = in_dat$v002,
stratum = in_dat$v023,
h9 = in_dat$h9,
mcv_yes = 1 * (in_dat$h9 == "vaccination date on card" |
in_dat$h9 == "reported by mother" |
in_dat$h9 == "vaccination marked on card"),
alive = in_dat$b5 == "yes",
doi = in_dat$v008,
dob = in_dat$b3,
wt = in_dat$v005/1000000
)
svy_dat <- subset(svy_dat, doi-dob <= 23 & doi-dob >= 12)
svy_dat <- subset(svy_dat, !is.na(mcv_yes))
svy_dat = subset(svy_dat, alive)
#### 1.2.3 Merge geographic info ####
ea_dat <- data.frame(cluster = ea_locs$DHSCLUST,
urban = ea_locs$URBAN_RURA,
lon = ea_locs$LONGNUM,
lat = ea_locs$LATNUM)
svy_dat = merge(svy_dat, ea_dat, by = "cluster")
points_frame <- as.data.frame(svy_dat[,c("lon", "lat")])
points_frame <- SpatialPoints(points_frame)
# assign points to admin 2
poly_over_adm2 <- SpatialPolygons(poly_adm2@polygons)
proj4string(points_frame) <-
proj4string(poly_over_adm2) <-
proj4string(poly_adm2)  <-
proj4string(poly_adm1)
admin2_key <- over(points_frame, poly_over_adm2)
miss_frame_adm2 <-
matrix(unique(points_frame@coords[which(is.na(admin2_key)),]), ncol = 2)
if(dim(miss_frame_adm2)[1] != 0){
miss_poly_adm2 <- dist2Line( miss_frame_adm2, poly_over_adm2)
for(i in 1:dim(miss_poly_adm2)[1]){
long_ids <-
which(points_frame@coords[,c("lon")] %in% miss_frame_adm2[i,1])
lat_ids <-
which(points_frame@coords[,c("lat")] %in% miss_frame_adm2[i,2])
ids <- intersect(long_ids, lat_ids)
admin2_key[ids] <- rep(miss_poly_adm2[i, 'ID'], length(ids))
}
}
svy_dat$admin2 <- admin2_key
svy_dat$admin2_char <- paste0("admin2_", admin2_key)
svy_dat$admin2_name <- as.character(poly_adm2@data$NAME_2)[admin2_key]
# assign points to admin 2
poly_over_adm1 <- SpatialPolygons(poly_adm1@polygons)
proj4string(points_frame) <-
proj4string(poly_over_adm1) <-
proj4string(poly_adm1)
admin1_key <- over(points_frame, poly_over_adm1)
miss_frame_adm1 <-
matrix(unique(points_frame@coords[which(is.na(admin1_key)),]), ncol = 2)
if(dim(miss_frame_adm1)[1] != 0){
miss_poly_adm1 <- dist2Line(miss_frame_adm1, poly_over_adm1)
for(i in 1:dim(miss_poly_adm1)[1]){
long_ids <-
which(points_frame@coords[,c("lon")] %in% miss_frame_adm1[i,1])
lat_ids <-
which(points_frame@coords[,c("lat")] %in% miss_frame_adm1[i,2])
ids <- intersect(long_ids, lat_ids)
admin1_key[ids] <- rep(miss_poly_adm1[i, 'ID'], length(ids))
}
}
svy_dat$admin1 <- admin1_key
svy_dat$admin1_char <- paste0("admin1_", admin1_key)
svy_dat$admin1_name <- as.character(poly_adm1@data$NAME_1)[admin1_key]
# add number of trials
svy_dat$n_trials <- 1
saveRDS(svy_dat,
file = paste0(proj_data_dir, "clean_DHS_data_DELETE-ME.rds"))
}
svy_dat$DHSadm1 <- stringr::str_sub(svy_dat$stratum, end = -7)
#### 2 DESIGN-BASED METHODS ####################################################
#### 2.1.1 Hajek ####
sample_des <- svydesign(id = ~cluster + hshold,
strata = ~stratum, nest=T,
weights = ~wt, data=svy_dat)
dir_est <- svyby(~mcv_yes, ~admin1_char, sample_des, svymean)
hajek_est <- dir_est %>%
rename(mean = mcv_yes) %>%
mutate(median = mean, var = se ^ 2, domain = admin1_char) %>%
dplyr::select(domain, mean, median, var) %>%
mutate(lower = mean + qnorm((1-.95)/2) * sqrt(var),
upper = mean + qnorm((1+.95)/2) * sqrt(var),
method = "Hajek")  %>%
arrange(match(domain, rownames(admin1_mat)))
nc_dat <- svy_dat %>%
group_by(admin1_char) %>%
summarize(nc = length(unique(cluster)),
c_size = n() / length(unique(cluster))) %>%
arrange(match(admin1_char, rownames(admin1_mat)))
temp <- VSALM:::spatialJointLogitVS(Yhat = hajek_est$mean,
Vhat = hajek_est$var,
domain = hajek_est$domain,
df = nc_dat$nc,
adj_mat = admin1_mat)
ncol(matrix(0, nrow = length(Yhat), ncol = 0))
ncol(matrix(0, nrow = 10, ncol = 0))
traceback()
browser
browser()
debugonce()
temp <- VSALM:::spatialJointLogitVS(Yhat = hajek_est$mean,
Vhat = hajek_est$var,
domain = hajek_est$domain,
df = nc_dat$nc,
adj_mat = admin1_mat)
debugonce(VSALM:::spatialJointLogitVS)
temp <- VSALM:::spatialJointLogitVS(Yhat = hajek_est$mean,
Vhat = hajek_est$var,
domain = hajek_est$domain,
df = nc_dat$nc,
adj_mat = admin1_mat)
dat
dat
Yhat
direct_est
to_smooth
library(VSALM)
temp <- VSALM:::spatialJointLogitVS(Yhat = hajek_est$mean,
Vhat = hajek_est$var,
domain = hajek_est$domain,
df = nc_dat$nc,
adj_mat = admin1_mat)
temp <- VSALM:::spatialJointLogitVS(Yhat = hajek_est$mean,
Vhat = hajek_est$var,
domain = hajek_est$domain,
df = nc_dat$nc,
adj_mat = admin1_mat)
=======
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
example(source)
roxygen2::roxygenize(load_code = sourceDir)
roxygen2::roxygenize()
install.packages("../VSALM/", repos = NULL, type = "source")
>>>>>>> Stashed changes
library(VSALM)
library(VSALM)
library(VSALM)
library(VSALM)
library(VSALM)
library(VSALM)
devtools::install("../VSALM/")
sqrt(1000)
library(VSALM)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(sae)
library(sae)
data("grapes")
data("grapesprox")
SFH <- mseSFH(grapehect ~ area + workdays - 1, var, grapesprox, data = grapes)
grapes
grapes_X <- model.matrix(~ area + workdays - 1, grapes)
grapesprox
temp <- iidMeanSmooth(Yhat = grapes$grapehect,
Vhat= grapes$var,
domain = grapes_domain,
X = grapes_X)
grapes_X <- model.matrix(~ area + workdays - 1, grapes)
grapes_domain <- rownames(grapesprox)
temp <- iidMeanSmooth(Yhat = grapes$grapehect,
Vhat= grapes$var,
domain = grapes_domain,
X = grapes_X)
temp$domain
temp
plot(grapes$grapehect,temp$median)
plot(SFH$est$eblup,temp$median)
abline(0, 1)
data("cornsoybean")
cornsoybean
# remove counties with < 3 samples
cornsoybean <- cornsoybean[6:]
# remove counties with < 3 samples
cornsoybean <- cornsoybean[-(1:5),]
data("cornsoybean")
# remove counties with < 3 samples
cornsoybean <- cornsoybean[-(1:5),]
cornsoybean
cornsoybean_dir <- cornsoybean %>%
group_by(county) %>%
summarize(n = n(),
CornHec = mean(CornHec),
CornHecVar = var(CornHec))
library(sae)
library(dplyr)
library(tidyr)
# remove counties with < 3 samples
cornsoybean <- cornsoybean[-(1:5),]
cornsoybean_dir <- cornsoybean %>%
group_by(county) %>%
summarize(n = n(),
CornHec = mean(CornHec),
CornHecVar = var(CornHec))
cornsoybean_dir <- cornsoybean %>%
group_by(County) %>%
summarize(n = n(),
CornHec = mean(CornHec),
CornHecVar = var(CornHec))
= cornsoybean_dir
cornsoybean_dir <- cornsoybean %>%
group_by(County) %>%
summarize(n = n(),
CornHec = mean(CornHec),
CornHecVar = var(CornHec))
cornsoybean_dir
data("cornsoybean")
# remove counties with < 3 samples
cornsoybean <- cornsoybean[-(1:5),]
cornsoybean_dir <- cornsoybean %>%
group_by(County) %>%
summarize(n = n(),
CornHec = mean(CornHec),
CornHecVar = var(CornHec))
cornsoybean_dir
cornsoybean_dir <- cornsoybean %>%
group_by(County) %>%
summarize(n = n(),
CornHecVar = var(CornHec),
CornHec = mean(CornHec))
cornsoybean_dir
sqrt(cornsoybean_dir$CornHecVar)
?mseFH
FH <- mseFH(CornHec ~ 1, CornHecVar, data = cornsoybean_dir)
cornsoybean_dir <- cornsoybean %>%
group_by(County) %>%
summarize(n = n(),
CornHecVar = var(CornHec),
CornHec = mean(CornHec))
FH <- mseFH(CornHec ~ 1, CornHecVar, data = cornsoybean_dir)
FH <- mseFH(CornHec ~ 0, CornHecVar, data = cornsoybean_dir)
FH <- mseFH(CornHec ~ -1, CornHecVar, data = cornsoybean_dir)
FH <- mseFH(CornHec ~ 1, CornHecVar, data = cornsoybean_dir)
FH <- mseFH(CornHec ~ County, CornHecVar, data = cornsoybean_dir)
cornsoybean_dir <- cornsoybean %>%
group_by(County) %>%
summarize(n = n(),
CornHecVar = var(CornHec),
CornHec = mean(CornHec))
cornsoybean_dir
FH <- mseFH(CornHec ~ County, cornsoybean_dir$CornHecVar, data = cornsoybean_dir)
cornsoybean_dir <- cornsoybean %>%
group_by(County) %>%
summarize(n = n(),
CornHecVar = var(CornHec),
CornHec = mean(CornHec))
FH <- mseFH(CornHec ~ County, cornsoybean_dir$CornHecVar, data = cornsoybean_dir)
cornsoybean_dir$CornHecVar
FH <- mseFH(CornHec ~ as.factor(County), CornHecVar, data = cornsoybean_dir)
FH <- mseFH(cornsoybean_dir$CornHec ~ as.factor(cornsoybean_dir$County), cornsoybean_dir$CornHecVar)
FH <- mseFH(cornsoybean_dir$CornHec ~ as.factor(cornsoybean_dir$County), cornsoybean_dir$CornHecVar)
cornsoybean_dir$CornHecVar
FH <- mseFH(cornsoybean_dir$CornHec ~ cornsoybean_dir$County, cornsoybean_dir$CornHecVar)
FH
FH$est
iid_MS_est <- iidMeanSmooth(Yhat = cornsoybean_dir$CornHec,
Vhat= cornsoybean_dir$CornHecVar,
domain = cornsoybean_dir$County)
plot(FH$est$eblup, iid_MS_est$median)
abline(0, 1)
FH <- mseFH(cornsoybean_dir$CornHec ~ cornsoybean_dir$County, cornsoybean_dir$CornHecVar)
library(sae)
library(dplyr)
library(tidyr)
data("cornsoybean")
# remove counties with < 3 samples
cornsoybean <- cornsoybean[-(1:5),]
cornsoybean_dir <- cornsoybean %>%
group_by(County) %>%
summarize(n = n(),
CornHecVar = var(CornHec),
CornHec = mean(CornHec))
FH <- mseFH(cornsoybean_dir$CornHec ~ cornsoybean_dir$County, cornsoybean_dir$CornHecVar)
iid_MS_est <- iidMeanSmooth(Yhat = cornsoybean_dir$CornHec,
Vhat= cornsoybean_dir$CornHecVar,
domain = cornsoybean_dir$County,
pc_u = c(500, .01),)
plot(FH$est$eblup, iid_MS_est$median)
abline(0, 1)
FH
iid_MS_est
cornsoybean_dir
iid_MS_est <- iidMeanSmooth(Yhat = cornsoybean_dir$CornHec,
Vhat = cornsoybean_dir$CornHecVar,
domain = cornsoybean_dir$County,
pc_u = c(100, .01))
plot(FH$est$eblup, iid_MS_est$median)
abline(0, 1)
FH
cornsoybean
cornsoybean_dir
iid_MS_est $median
FH$est
FH <- mseFH(cornsoybean_dir$CornHec ~ as.factor(cornsoybean_dir$County), cornsoybean_dir$CornHecVar)
FH <- mseFH(cornsoybean_dir$CornHec ~ as.factor(cornsoybean_dir$County)-1, cornsoybean_dir$CornHecVar)
traceback()
debugonce(eblupFH)
debugonce(mseFH)
FH <- mseFH(cornsoybean_dir$CornHec ~ as.factor(cornsoybean_dir$County)-1, cornsoybean_dir$CornHecVar, PRECISION = .00000001, MAXITER = 100000)
diff
diff
k
MAXITER
eblupFH
FH <- mseFH(cornsoybean_dir$CornHec ~ as.factor(cornsoybean_dir$County)+0, cornsoybean_dir$CornHecVar, PRECISION = .00000001, MAXITER = 100000)
iid_MS_est
iid_MS_est <- iidMeanSmooth(Yhat = cornsoybean_dir$CornHec,
Vhat = cornsoybean_dir$CornHecVar,
domain = cornsoybean_dir$County,
pc_u = c(1000, .01))
iid_MS_est <- iidMeanSmooth(Yhat = cornsoybean_dir$CornHec,
Vhat = cornsoybean_dir$CornHecVar,
domain = cornsoybean_dir$County,
pc_u = c(1000, .01))iid_MS_est <- iidMeanSmooth(Yhat = cornsoybean_dir$CornHec / 100,
iid_MS_est <- iidMeanSmooth(Yhat = cornsoybean_dir$CornHec / 100,
Vhat = cornsoybean_dir$CornHecVar / 100^2,
domain = cornsoybean_dir$County,
pc_u = c(10, .01))
iid_MS_est
cornsoybean_dir$CornHec / 100,
cornsoybean_dir$CornHec / 100
iid_MS_est <- iidMeanSmooth(Yhat = cornsoybean_dir$CornHec / 100,
Vhat = cornsoybean_dir$CornHecVar / 100^2,
domain = cornsoybean_dir$County,
pc_u = c(1, .01))
iid_MS_est
iid_MS_est <- iidMeanSmooth(Yhat = cornsoybean_dir$CornHec / 100,
Vhat = cornsoybean_dir$CornHecVar / (100^2),
domain = cornsoybean_dir$County,
pc_u = c(1, .01))
iid_MS_est <- iidMeanSmooth(Yhat = cornsoybean_dir$CornHec / 100,
Vhat = cornsoybean_dir$CornHecVar / (100^2),
domain = cornsoybean_dir$County,
pc_u = c(1, .01))
iid_MS_est <- iidMeanSmooth(Yhat = cornsoybean_dir$CornHec / 100,
Vhat = cornsoybean_dir$CornHecVar / (100^2),
domain = cornsoybean_dir$County,
pc_u = c(1, .01))
set.seed(805)
iid_MS_est <- iidMeanSmooth(Yhat = cornsoybean_dir$CornHec / 100,
Vhat = cornsoybean_dir$CornHecVar / (100^2),
domain = cornsoybean_dir$County,
pc_u = c(1, .01))
set.seed(804)
iid_MS_est <- iidMeanSmooth(Yhat = cornsoybean_dir$CornHec,
Vhat = cornsoybean_dir$CornHecVar,
domain = cornsoybean_dir$County,
pc_u = c(100, .01))
set.seed(803)
iid_MS_est <- iidMeanSmooth(Yhat = cornsoybean_dir$CornHec,
Vhat = cornsoybean_dir$CornHecVar,
domain = cornsoybean_dir$County,
pc_u = c(100, .01))
set.seed(801)
iid_MS_est <- iidMeanSmooth(Yhat = cornsoybean_dir$CornHec,
Vhat = cornsoybean_dir$CornHecVar,
domain = cornsoybean_dir$County,
pc_u = c(100, .01))
set.seed(807)
iid_MS_est <- iidMeanSmooth(Yhat = cornsoybean_dir$CornHec,
Vhat = cornsoybean_dir$CornHecVar,
domain = cornsoybean_dir$County,
pc_u = c(100, .01))
set.seed(806)
iid_MS_est <- iidMeanSmooth(Yhat = cornsoybean_dir$CornHec,
Vhat = cornsoybean_dir$CornHecVar,
domain = cornsoybean_dir$County,
pc_u = c(100, .01))
set.seed(805)
iid_MS_est <- iidMeanSmooth(Yhat = cornsoybean_dir$CornHec,
Vhat = cornsoybean_dir$CornHecVar,
domain = cornsoybean_dir$County,
pc_u = c(100, .01))
set.seed(805)
iid_MS_est <- iidMeanSmooth(Yhat = cornsoybean_dir$CornHec,
Vhat = cornsoybean_dir$CornHecVar,
domain = cornsoybean_dir$County,
pc_u = c(100, .05))
set.seed(802)
iid_MS_est <- iidMeanSmooth(Yhat = cornsoybean_dir$CornHec,
Vhat = cornsoybean_dir$CornHecVar,
domain = cornsoybean_dir$County,
pc_u = c(100, .05))
iid_MS_est
set.seed(806)
iid_MS_est <- iidMeanSmooth(Yhat = cornsoybean_dir$CornHec,
Vhat = cornsoybean_dir$CornHecVar,
domain = cornsoybean_dir$County,
pc_u = c(100, .05))
iid_MS_est
set.seed(806)
iid_JS_est <- iidJointSmooth(Yhat = cornsoybean_dir$CornHec,
Vhat = cornsoybean_dir$CornHecVar,
domain = cornsoybean_dir$County,
na = cornsoybean_dir$n,
df = cornsoybean_dir$n - 1,
pc_u = c(100, .05))
iid_JS_est
set.seed(806)
iid_MS_est <- iidMeanSmooth(Yhat = cornsoybean_dir$CornHec,
Vhat = cornsoybean_dir$CornHecVar,
domain = cornsoybean_dir$County,
pc_u = c(100, .05))
set.seed(801)
iid_JS_est <- iidJointSmooth(Yhat = cornsoybean_dir$CornHec,
Vhat = cornsoybean_dir$CornHecVar,
domain = cornsoybean_dir$County,
na = cornsoybean_dir$n,
df = cornsoybean_dir$n - 1,
pc_u = c(100, .05),
pc_tau = c(10, .05),)
iid_JS_est
library(VSALM)
library(VSALM)
library(usethis)
use_git_config(user.name = "peteragao", user.email = "pgao17@gmail.com")
gitcreds::gitcreds_set()
